/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Kudos {
  export type GetKudosParamsStruct = {
    page: BigNumberish;
    pageSize: BigNumberish;
  };

  export type GetKudosParamsStructOutput = [page: bigint, pageSize: bigint] & {
    page: bigint;
    pageSize: bigint;
  };

  export type KudoStruct = {
    from: AddressLike;
    to: AddressLike;
    message: string;
    timestamp: BigNumberish;
  };

  export type KudoStructOutput = [
    from: string,
    to: string,
    message: string,
    timestamp: bigint
  ] & { from: string; to: string; message: string; timestamp: bigint };

  export type PaginatedKudosStruct = {
    kudos: Kudos.KudoStruct[];
    currentPage: BigNumberish;
    pageSize: BigNumberish;
    totalPages: BigNumberish;
    totalItems: BigNumberish;
  };

  export type PaginatedKudosStructOutput = [
    kudos: Kudos.KudoStructOutput[],
    currentPage: bigint,
    pageSize: bigint,
    totalPages: bigint,
    totalItems: bigint
  ] & {
    kudos: Kudos.KudoStructOutput[];
    currentPage: bigint;
    pageSize: bigint;
    totalPages: bigint;
    totalItems: bigint;
  };

  export type SendKudoParamsStruct = { to: AddressLike; message: string };

  export type SendKudoParamsStructOutput = [to: string, message: string] & {
    to: string;
    message: string;
  };
}

export interface KudosInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getKudosReceived"
      | "getKudosReceivedCount"
      | "getKudosSent"
      | "getKudosSentCount"
      | "sendKudo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "KudoSent"): EventFragment;

  encodeFunctionData(
    functionFragment: "getKudosReceived",
    values: [Kudos.GetKudosParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getKudosReceivedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKudosSent",
    values: [Kudos.GetKudosParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getKudosSentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendKudo",
    values: [Kudos.SendKudoParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getKudosReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKudosReceivedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKudosSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKudosSentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendKudo", data: BytesLike): Result;
}

export namespace KudoSentEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    message: string
  ];
  export type OutputTuple = [from: string, to: string, message: string];
  export interface OutputObject {
    from: string;
    to: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Kudos extends BaseContract {
  connect(runner?: ContractRunner | null): Kudos;
  waitForDeployment(): Promise<this>;

  interface: KudosInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getKudosReceived: TypedContractMethod<
    [params: Kudos.GetKudosParamsStruct],
    [Kudos.PaginatedKudosStructOutput],
    "view"
  >;

  getKudosReceivedCount: TypedContractMethod<[], [bigint], "view">;

  getKudosSent: TypedContractMethod<
    [params: Kudos.GetKudosParamsStruct],
    [Kudos.PaginatedKudosStructOutput],
    "view"
  >;

  getKudosSentCount: TypedContractMethod<[], [bigint], "view">;

  sendKudo: TypedContractMethod<
    [params: Kudos.SendKudoParamsStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getKudosReceived"
  ): TypedContractMethod<
    [params: Kudos.GetKudosParamsStruct],
    [Kudos.PaginatedKudosStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKudosReceivedCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getKudosSent"
  ): TypedContractMethod<
    [params: Kudos.GetKudosParamsStruct],
    [Kudos.PaginatedKudosStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKudosSentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendKudo"
  ): TypedContractMethod<
    [params: Kudos.SendKudoParamsStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "KudoSent"
  ): TypedContractEvent<
    KudoSentEvent.InputTuple,
    KudoSentEvent.OutputTuple,
    KudoSentEvent.OutputObject
  >;

  filters: {
    "KudoSent(address,address,string)": TypedContractEvent<
      KudoSentEvent.InputTuple,
      KudoSentEvent.OutputTuple,
      KudoSentEvent.OutputObject
    >;
    KudoSent: TypedContractEvent<
      KudoSentEvent.InputTuple,
      KudoSentEvent.OutputTuple,
      KudoSentEvent.OutputObject
    >;
  };
}
